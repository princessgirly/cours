.pop()supprime toujours le dernier élément d'un tableau
.shift() supprime toujours le premier élément d'un tableau

.unshift() ajoute l'élément au début du tableau
.push() ajoute l'élément à la fin du tableau

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function golfScore(par, strokes) {

 if (strokes === 1) {
  return "Hole-in-one!";
} else if ((par <= 5) && (strokes === 2)) {
  return "Eagle";
} else if (strokes === par-1) {
 return "Birdie";
} else if (par === strokes) {
 return "Par";
} else if (strokes === par+1) {
 return "Bogey";
} else if (strokes === par+2) {
 return "Double Bogey";
} else if (strokes >= par + 3) {
 return "Go Home!";
} else {  
  return "Change Me";
}
}
golfScore(5, 4);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}


///////

function testSize(num) {
 if (num < 5) {
  return "Tiny";
} else if (num < 10) {
  return "Small";
} else if (num < 15) {
 return "Medium";
} else if (num < 20) {
 return "Large";
} else {
return "Huge";
}
  return "Change Me";
}
testSize(7);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Here's the first:

function foo(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}
And the second just switches the order of the statements:

function bar(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}


function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  }
  else if (val < 5) {
    return "Smaller than 5";
  }
  else {
  return "Between 5 and 10";
}
}
testElseIf(7);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}


function testElse(val) {
  var result = ""; 
  if (val > 5) {
    result = "Bigger than 5";
  }
  else  {
    result = "5 or Smaller";
  }
  return result;
}
testElse(4);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if (num > 5 && num < 10) {
  return "Yes";
}
return "No";



function testLogicalAnd(val) {
 if (val >= 25 && val <= 50){
      return "Yes";
    }
  return "No";
}
testLogicalAnd(10);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (num > 10 || num < 5) {
  return "No";
}
return "Yes";
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//L'opérateur d'inégalité stricte ( !==) est l'inverse de l'opérateur d'égalité stricte. Cela signifie "Strictly Not Equal» 
//et retourne falseoù l' égalité stricte reviendrait trueet vice versa . Inégalité stricte ne convertit pas les types de données.

Exemples

3! == 3 // false 
3! == '3' // true 
4! == 3 // true


//L'opérateur d'inégalité ( !=) est le contraire de l'opérateur d'égalité. Cela signifie "Différent" et retourne falseoù 
//l' égalité serait de retour trueet vice versa . Comme l'opérateur d'égalité, l'opérateur d'inégalité permet de convertir 
//les types de données de valeurs tout en comparant.

Exemples

1! = 2 // true 
1! = "1" // false 
1! = '1' // false 
1! = True // false 
0! = False // false


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Boolean Les valeurs ne sont jamais écrites avec des guillemets. 
//Le booléen return soit true ou false

// La condition Lorsque la condition est évaluée à true, le programme exécute l'instruction à l' intérieur des accolades. 
//Lorsque la condition booléenne est évaluée à false, l'instruction à l' intérieur des accolades ne sera pas exécuté.


if ( condition est vraie ) { 
  instruction est exécutée
 }

// Example//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function ourTrueOrFalse(isItTrue) {
  if (isItTrue) { 
    return "Yes, it's true";
  }
  return "No, it's false";
}
function trueOrFalse(wasThatTrue) {
    if (wasThatTrue) { 
    return "Yes, that was true";
  }
  return "No, that was false";
}
trueOrFalse(true);
trueOrFalse(false);

function testEqual(val) {
  if (val==12) { 
    return "Equal";
  }
  return "Not Equal";
}
testEqual(10);

// Exemple////////////////////////////////////////////////////////////////////////////////////////////////////////
function testStrict(val) {
  if (val===7) { 
    return "Equal";
  }
  return "Not Equal";
}
testStrict(10);
//////////////////////////////////////////////////////////////////////////////////////////////////////

function destroyer(arr) {
  // Remove all the values
  var newArray = arguments[0];



  return newArray.filter(function(val){
    for (i=1; i<arguments.length; i++) {
      return val !== arguments[i];
    }
  });
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);


////////////////////////////////////////////////////////////////////////////////////////////////////////

var ourArray = [1,2,3];
var removedFromOurArray = ourArray.pop(); 
// removedFromOurArray now equals 3, and ourArray now equals [1,2]


var myArray = [["John", 23], ["cat", 2]];

var removedFromMyArray = myArray.pop();         // Enlève et Récupère les dernières données du tableau
// removedFromMyArray = ["John", 23]
// myArray = ["cat", 2]


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Une façon de penser d'un multi-dimensionnelle tableau, est comme un tableau de tableaux . Lorsque vous utilisez des crochets pour accéder à votre tableau, la première série de crochets se réfère aux entrées dans l'extrême extérieur (le premier niveau) tableau,
et chaque paire supplémentaire de parenthèses renvoie au prochain niveau d'entrées à l' intérieur. */

var arr = [
    [1,2,3],
    [4,5,6],
    [7,8,9],
    [[10,11,12], 13, 14]
];
arr[3]; // equals [[10,11,12], 13, 14]
arr[3][0]; // equals [10,11,12]
arr[3][0][1]; // equals 11


//Fais en sorte que myData soit = à 8


var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];

// Only change code below this line.
var myData = myArray[0][0];

myData = myArray[2][1];








//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var lastName = "Lovelace";

// Affiche la dernière lettre
var lastLetterOfLastName = lastName[lastName.length - 1];

// e

//You can also nest arrays within other arrays, like this: 
//[["Bulls", 23], ["White Sox", 45]]. This is also called a Multi-dimensional Array.
var myArray = [["the universe", 42], ["everything", 101010]];


//Attibuer a mon nx array la 1ère valeur du array myArray
// Setup
var myArray = [1,2,3];
var myData = myArray[0];
// Only change code below this line.

//Modify the data stored at index 0 of myArray to a value of 3
var myArray = [1,2,3];
myArray[0] = 3;
